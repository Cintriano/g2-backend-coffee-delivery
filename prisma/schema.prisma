// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Coffee {
  id          String     @id @default(uuid())
  name        String
  description String
  price       Decimal    @db.Decimal(10, 2)
  imageUrl    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relacionamentos incompleto
  tags        CoffeeTag[]
}

model Tag {
  id        String      @id @default(uuid())
  name      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  // Relacionamentos 
  coffees   CoffeeTag[] 
}

model CoffeeTag {
  id        String  @id @default(uuid())
  coffeeId  String
  tagId     String
  // Relacionamentos aqui
  cafe    Coffee   @relation(fields: [coffeeId], references: [id])
  tag    Tag   @relation(fields: [tagId], references: [id])
}

model Cart {
  id              String     @id @default(uuid())
  status          String
  status_payment  String
  userId          String?    // Opcional para usuários não autenticados
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  itemsId         String
  
  // Relacionamentos incompleto
  items           CartItem[] @relation(fields: [itemsId], references: [id])
}

model CartItem {
  id         String   @id @default(uuid())
  quantity   Int      
  unitPrice  Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  coffeeId   String
  cartId     String
  
  // Relacionamentos aqui
  coffee     Coffee   @relation(fields: [coffeeId], references: [id])
  cart       Cart     @relation(fields: [cartId], references: [id])
}
